/*****
描述
    任意给定一个k（其中，k 大于1小于10）进制的数（不超过30位，且第一位不为0），以此为基点，按增1的方式连续
    输出后面的m个k进制数，其间以逗号间隔,这里，m为正整数。输出的每个数第一位不能为0，每行输出5个数，最后一
    行可以少于5个。
    例如，给定12位的5进制数：321234232132，后面的6个数依次为：
    321234232133,321234232134,321234232140,321234232141,321234232142,321234232143
    如果输出6个数，则应该是：
    321234232133,321234232134,321234232140,321234232141,321234232142
    321234232143
关于输入
    输入三个数k,m,和k进制数，三个数之间以逗号间隔，k进制数不超过30位，m为正整数。
关于输出
    输出后续的m个数，每行5个数（每行的最后一个数之后没有逗号），最后一行可以少于5个数。
例子输入
    5,6,321234232132
例子输出
    321234232133,321234232134,321234232140,321234232141,321234232142
    321234232143
*****/

#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

#define MAX_LEN 100

int k = 0;
char s[MAX_LEN] = "\0";

void addone()
{
	int l = strlen(s);
	reverse(s, s + l);
	s[l] = '0'; // 预留一位给进位
	s[0] += 1;
	for (int i = 0; i < l; i++)
    {
		s[i + 1] += (s[i] - '0') / k;   // 大整数加法
		s[i] = (s[i] - '0') % k + '0';
	}
	if (s[l] != '0')    // 由于进位导致多了一位
		l++;
	s[l] = '\0';    // 复原
	reverse(s, s + l);
	return;
}

int main()
{
	int m;
	char c;
	cin >> k >> c >> m >> c >> s;
	for (int i = 0; i < m; i++)
    {
		addone();
		cout << s;
		if (i != m - 1)
        {
            if (i % 5 == 4)
                cout << endl;
            else
                cout << ",";
        }
	}
	return 0;
}
